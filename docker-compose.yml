services:
  jenkins:
    cap_drop: # Limit Container Capabilities
      - ALL
    cap_add:
      - CHOWN
      - NET_BIND_SERVICE
    build:
      dockerfile: jenkins.dockerfile
      context: .
    container_name: jenkins
    ports:
      - "8899:8899"
    volumes:
      - ./jenkins_home:/var/jenkins_home # Mount the Jenkins file onto ./jenkins_home folder
      # - ./var/run/docker.sock:/var/run/docker.sock  # do not expose docker daemon sock, decided not to use docker in docker
      - ./APP_Deployment_ENV:/var/jenkins_home/workspace/DevSecOps/APP_Development_ENV/SimpleNetApp/APP_Deployment_ENV
    networks:
      MyCustomNetwork:
        ipv4_address: 172.20.0.2
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    # deploy:
    #   resources:
    #     limits:
    #       cpus: '1'
    #       memory: 512M

  sonarqube:
    cap_drop: # Limit Container Capabilities
      - ALL
    cap_add:
      - CHOWN
      - NET_BIND_SERVICE
    image: sonarqube:latest
    container_name: sonarqube
    ports:
      - "9000:9000"
    networks:
      MyCustomNetwork:
        ipv4_address: 172.20.0.3
    environment:
      - SONAR_ES_BOOTSTRAP_CHECKS_DISABLE=true  # Running sonarqube server using docker does not require Elasticsearch bootstrap checks or environment scan in short
    volumes:
      # default username:admin & password:admin
      - ./sonarqube/sonarqube_data:/opt/sonarqube/data
      - ./sonarqube/sonarqube_extensions:/opt/sonarqube/extensions
      - ./sonarqube/sonarqube_logs:/opt/sonarqube/logs
      - ./sonarqube/sonarqube_temp:/opt/sonarqube/temp
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    # deploy:
    #   resources:
    #     limits:
    #       cpus: '1'
    #       memory: 1G
  nginx:
    build:
      context: .
      dockerfile: nginx.dockerfile
    container_name: nginx
    ports:
      - "8080:80"
      - "2222:22"  # Expose port 22 for SSH
    volumes:
      - ./nginx/html:/usr/share/nginx/html
      - ./nginx/ssh_keys:/etc/ssh  # Persist SSH host keys
      # - ./nginx/root_ssh:/root/.ssh  # Persist root's .ssh directory
      # - ./nginx/admin_user_ssh:/admin_user/.ssh
      - ./nginx/admin_user_ssh:/home/admin_user/.ssh
      - ./nginx/conf:/etc/nginx
    networks:
      MyCustomNetwork:
        ipv4_address: 172.20.0.4
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M

networks:
  MyCustomNetwork:
    # internal: true  # Restrict external access
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/24 # Replace with any private network if need


# docker-compose up -d --build
# docker-compose down