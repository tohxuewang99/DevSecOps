pipeline {
    agent any
    stages {
        stage('Git Checkout') {
            steps {
                //token secret is safe and hidden in the credentials with testing repo
                git branch: 'main', url: 'https://dev.azure.com/wangu99/_git/CICD_Tests_with_Jenkins_and_Netcore_6', credentialsId: 'Azure'
                //remove .git
                sh 'rm -rf .git'
            }
        }
        stage('Build') {
            steps {
                script {
                    dir('APP_Development_ENV/SimpleNetApp') {
                        sh '''dotnet clean
                        dotnet nuget locals all --clear
                        dotnet restore
                        dotnet build'''
                    }
                }
            }
        }
        stage('Unit Testing') {
            steps {
                script {
                    dir('APP_Development_ENV/SimpleNetApp.Tests') {
                        sh 'dotnet test'
                    }
                }
            }
        }
        stage('OWASP Dependency check') {
            steps {
                dependencyCheck additionalArguments: ''' -o './' -s './' --format "XML" --format "HTML" --prettyPrint --suppression "suppression.xml" ''', odcInstallation: 'OWASP'
                dependencyCheckPublisher pattern: 'dependency-check-report.xml'
            }
        }
        stage('SonarQube Analysis') {
            steps {
                script {
                    def scannerHome = tool 'SonarLatest';
                    // confirmed localhost does not work
                    // need projectkey
                    withSonarQubeEnv("SonarQube") {
                        withCredentials([string(credentialsId: 'Sonar_token', variable: 'SONARQUBE_TOKEN')]) {
                            sh "${scannerHome}/bin/sonar-scanner \
                            -Dsonar.projectKey=Jenkins \
                            -Dsonar.sources=${env.WORKSPACE} \
                            -Dsonar.host.url=http://172.20.0.3:9000 \
                            -Dsonar.token=${SONARQUBE_TOKEN} \
                            -Dsonar.dotnet.excludeTestProjects=true \
                            -Dsonar.qualitygate.wait=true"
                        }
                    }
                }
            }
		}
        stage('Quality Gate') {
            steps {
                script {
                    withSonarQubeEnv("SonarQube") {
                        withCredentials([string(credentialsId: 'Sonar_token', variable: 'SONARQUBE_TOKEN')]) {
                            // Query the SonarQube API for the Quality Gate status
                            def projectKey = 'Jenkins' // Match the projectKey from the scan
                            def qualityGateStatus = sh(script: """
                                curl -u ${SONARQUBE_TOKEN}: \
                                http://172.20.0.3:9000/api/qualitygates/project_status?projectKey=${projectKey} \
                                | jq -r '.projectStatus.status'
                            """, returnStdout: true).trim()
        
                            if (qualityGateStatus != 'OK') {
                                error "Pipeline aborted due to failing Quality Gate: ${qualityGateStatus}"
                            }
                        }
                    }
                }
            }
        }
        stage('Publish .NET Application') {
            steps {
                script {
                    dir('APP_Development_ENV/SimpleNetApp') {
                        sh 'dotnet clean'
                        sh 'dotnet publish -c Release -p:PublishReadyToRun=false --self-contained false --framework net6.0 -o ./APP_Deployment_ENV/linux_x64'
                        sh 'dotnet clean'
                        sh 'dotnet publish -c Release -r win-x64 --self-contained -p:PublishReadyToRun=true --framework net6.0 -o ./APP_Deployment_ENV/win_x64'
                    }
                }
            }
        }
        stage('Deploy to Linux') {
            steps {
                sshagent(credentials: ['jenkins-ssh-key']) {
                    sh """
                    # Copy the published files to the Nginx container
                    scp -o StrictHostKeyChecking=no -r ./APP_Development_ENV/SimpleNetApp/APP_Deployment_ENV/linux_x64/* root@172.20.0.4:/usr/share/nginx/html/
    
                    ssh -o StrictHostKeyChecking=no root@172.20.0.4 bash << 'EOF'
                        cd /usr/share/nginx/html/
    
                        # Find and kill the previous process
                        PID=\$(pgrep -f SimpleNetApp.dll)
                        if [ ! -z "\$PID" ]; then
                            echo "Stopping existing application (PID: \$PID)"
                            kill -9 \$PID
                        fi
    
                        # Start the application in the background
                        nohup dotnet SimpleNetApp.dll > /dev/null 2>&1 &
                        echo "Application restarted successfully"
                """
                }
            }
        }
        stage('Deploy to Window') {
            steps {
                // sshagent(credentials: ['windows_ssh_key']) {
                // scp -o StrictHostKeyChecking=no -r /app_deployment/windows_x64/* Administrator@windows-server-ip:/path/to/deploy/
                // ssh -o StrictHostKeyChecking=no Administrator@windows-server-ip powershell -Command "& {
                //     cd /path/to/deploy
                //     Stop-Process -Name SimpleNetApp -ErrorAction SilentlyContinue
                //     Start-Process -FilePath .\\SimpleNetApp.exe
                echo 'Deployment to Windows Manually, Successful! (Ran out of resource)'
            }
        }
    }
    post {
        success {
            echo 'Deployment successful!'
        }
        failure {
            echo 'Deployment failed!'
        }
    }
}