pipeline {
	agent any
	stages {
		stage('Git Checkout') {
			steps {
                //token secret is safe and hidden in the credentials with testing repo
				git branch: 'main', url: 'https://dev.azure.com/wangu99/_git/CICD_Tests_with_Jenkins_and_Netcore_6', credentialsId: 'Azure'
                //remove .git file to stop infinite loop when uploading to git
                sh 'rm -rf .git'
			}
		}
        stage('Build') {
            steps {
                script {
                    dir('APP_Development_ENV/SimpleNetApp') {
                        sh 'dotnet build'
                    }
                }
            }
        }
        stage('Unit Testing') {
            steps {
                script {
                    dir('APP_Development_ENV/SimpleNetApp.Tests') {
                        sh 'dotnet test'
                    }
                }
            }
        }
        stage('OWASP Dependency check') {
            steps {
                dependencyCheck additionalArguments: ''' -o './' -s './' --format "XML" --format "HTML" --prettyPrint --suppression "suppression.xml" ''', odcInstallation: 'OWASP'
                dependencyCheckPublisher pattern: 'dependency-check-report.xml'
            }
        }
        stage('SonarQube Analysis') {
            steps {
                script {
                    def scannerHome = tool 'SonarLatest';
                    // confirmed localhost does not work
                    // need projectkey
                    withSonarQubeEnv("SonarQube") {
                        withCredentials([string(credentialsId: 'Sonar_token', variable: 'SONARQUBE_TOKEN')]) {
                            sh "${scannerHome}/bin/sonar-scanner \
                            -Dsonar.projectKey=Jenkins \
                            -Dsonar.sources=${env.WORKSPACE} \
                            -Dsonar.host.url=http://172.20.0.3:9000 \
                            -Dsonar.token=${SONARQUBE_TOKEN} \
                            -Dsonar.dotnet.excludeTestProjects=true \
                            -Dsonar.qualitygate.wait=true"
                        }
                    }
                }
            }
		}
        stage('Quality Gate') {
            steps {
                script {
                    // waitForQualityGate abortPipeline: true
                    // timeout(time: 10, unit: 'MINUTES') {
                    //     def qg = waitForQualityGate()
                    //     if (qg.status != 'OK') {
                    //         error "Pipeline aborted due to failing Quality Gate: ${qg.status}"
                    //     }
                    withSonarQubeEnv("SonarQube") {
                        withCredentials([string(credentialsId: 'Sonar_token', variable: 'SONARQUBE_TOKEN')]) {
                            // Query the SonarQube API for the Quality Gate status
                            def projectKey = 'Jenkins' // Match the projectKey from the scan
                            def qualityGateStatus = sh(script: """
                                curl -u ${SONARQUBE_TOKEN}: \
                                http://172.20.0.3:9000/api/qualitygates/project_status?projectKey=${projectKey} \
                                | jq -r '.projectStatus.status'
                            """, returnStdout: true).trim()
        
                            if (qualityGateStatus != 'OK') {
                                error "Pipeline aborted due to failing Quality Gate: ${qualityGateStatus}"
                            }
                        }
                    }
                }
            }
        }
    }
}